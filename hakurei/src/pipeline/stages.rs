
use ash::vk;

use utility::marker::VulkanFlags;
use utility::marker::Handles;

use utility::marker::VulkanEnum;

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub enum PipelineStageFlag {
    /// TopOfPipeBit specifies the stage of the pipeline where any commands are initially received by the queue
    TopOfPipeBit,
    /// DrawIndirectBit specifies the stage of the pipeline where Draw/DispatchIndirect data structures are consumed.
    DrawIndirectBit,
    /// VertexInputBit specifies the stage of the pipeline where vertex and index buffers are consumed.
    VertexInputBit,
    /// VertexShaderBit specifies the vertex shader stage.
    VertexShaderBit,
    /// TessellationControlShaderBit specifies the tessellation control shader stage.
    TessellationControlShaderBit,
    /// TessellationEvaluationShaderBit specifies the tessellation evaluation shader stage.
    TessellationEvaluationShaderBit,
    /// GeometryShaderBit specifies the geometry shader stage.
    GeometryShaderBit,
    /// FragmentShaderBit specifies the fragment shader stage.
    FragmentShaderBit,
    /// EarlyFragmentTestsBit specifies the stage of the pipeline where early fragment tests (depth and stencil tests before fragment shading) are performed.
    ///
    /// This stage also includes subpass load operations for framebuffer attachments with a depth/stencil format.
    EarlyFragmentTestsBit,
    /// LateFragmentTestsBit specifies the stage of the pipeline where late fragment tests (depth and stencil tests after fragment shading) are performed.
    ///
    /// This stage also includes subpass store operations for framebuffer attachments with a depth/stencil format.
    LateFragmentTestsBit,
    /// ColorAttachmentOutputBit specifies the stage of the pipeline after blending where the final color values are output from the pipeline.
    ///
    /// This stage also includes subpass load and store operations and multisample resolve operations
    /// for framebuffer attachments with a color format.
    ColorAttachmentOutputBit,
    /// ComputeShaderBit specifies the execution of a compute shader.
    ComputeShaderBit,
    /// TransferBit specifies the execution of copy commands.
    ///
    /// This includes the operations resulting from all copy commands, clear commands
    /// (with the exception of vkCmdClearAttachments), and vkCmdCopyQueryPoolResults.
    TransferBit,
    /// BottomOfPipeBit specifies the final stage in the pipeline where operations generated by all commands complete execution.
    BottomOfPipeBit,
    /// HostBit specifies a pseudo-stage indicating execution on the host of reads/writes of device memory.
    ///
    /// This stage is not invoked by any commands recorded in a command buffer
    HostBit,
    /// AllGraphicsBit specifies the execution of all graphics pipeline stages, and is equivalent to the logical OR of:
    ///
    /// TopOfPipeBit, DrawIndirectBit, VertexInputBit, VertexShaderBit, TessellationControlShaderBit,
    /// TessellationEvaluationShaderBit, GeometryShaderBit, FragmentShaderBit, EarlyFragmentTestsBit,
    /// LateFragmentTestsBit, ColorAttachmentOutBit, ComputeShaderBit.
    AllGraphicsBit,
    /// AllCommandsBit is equivalent to the logical OR of every other pipeline stage flag
    /// that is supported on the queue it is used with.
    AllCommandsBit,
}

impl VulkanEnum for PipelineStageFlag {
    type EnumType = vk::PipelineStageFlags;

    fn value(&self) -> Self::EnumType {
        match *self {
            | PipelineStageFlag::TopOfPipeBit                    => vk::PIPELINE_STAGE_TOP_OF_PIPE_BIT,
            | PipelineStageFlag::DrawIndirectBit                 => vk::PIPELINE_STAGE_DRAW_INDIRECT_BIT,
            | PipelineStageFlag::VertexInputBit                  => vk::PIPELINE_STAGE_VERTEX_INPUT_BIT,
            | PipelineStageFlag::VertexShaderBit                 => vk::PIPELINE_STAGE_VERTEX_SHADER_BIT,
            | PipelineStageFlag::TessellationControlShaderBit    => vk::PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
            | PipelineStageFlag::TessellationEvaluationShaderBit => vk::PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
            | PipelineStageFlag::GeometryShaderBit               => vk::PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
            | PipelineStageFlag::FragmentShaderBit               => vk::PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
            | PipelineStageFlag::EarlyFragmentTestsBit           => vk::PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
            | PipelineStageFlag::LateFragmentTestsBit            => vk::PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
            | PipelineStageFlag::ColorAttachmentOutputBit        => vk::PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
            | PipelineStageFlag::ComputeShaderBit                => vk::PIPELINE_STAGE_COMPUTE_SHADER_BIT,
            | PipelineStageFlag::TransferBit                     => vk::PIPELINE_STAGE_TRANSFER_BIT,
            | PipelineStageFlag::BottomOfPipeBit                 => vk::PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
            | PipelineStageFlag::HostBit                         => vk::PIPELINE_STAGE_HOST_BIT,
            | PipelineStageFlag::AllGraphicsBit                  => vk::PIPELINE_STAGE_ALL_GRAPHICS_BIT,
            | PipelineStageFlag::AllCommandsBit                  => vk::PIPELINE_STAGE_ALL_COMMANDS_BIT,
        }
    }
}

impl VulkanFlags for [PipelineStageFlag] {
    type FlagType = vk::PipelineStageFlags;

    fn flags(&self) -> Self::FlagType {
        self.iter().fold(vk::PipelineStageFlags::empty(), |acc, flag| {
            match *flag {
                | PipelineStageFlag::TopOfPipeBit                    => acc | vk::PIPELINE_STAGE_TOP_OF_PIPE_BIT,
                | PipelineStageFlag::DrawIndirectBit                 => acc | vk::PIPELINE_STAGE_DRAW_INDIRECT_BIT,
                | PipelineStageFlag::VertexInputBit                  => acc | vk::PIPELINE_STAGE_VERTEX_INPUT_BIT,
                | PipelineStageFlag::VertexShaderBit                 => acc | vk::PIPELINE_STAGE_VERTEX_SHADER_BIT,
                | PipelineStageFlag::TessellationControlShaderBit    => acc | vk::PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
                | PipelineStageFlag::TessellationEvaluationShaderBit => acc | vk::PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
                | PipelineStageFlag::GeometryShaderBit               => acc | vk::PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
                | PipelineStageFlag::FragmentShaderBit               => acc | vk::PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
                | PipelineStageFlag::EarlyFragmentTestsBit           => acc | vk::PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
                | PipelineStageFlag::LateFragmentTestsBit            => acc | vk::PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
                | PipelineStageFlag::ColorAttachmentOutputBit        => acc | vk::PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
                | PipelineStageFlag::ComputeShaderBit                => acc | vk::PIPELINE_STAGE_COMPUTE_SHADER_BIT,
                | PipelineStageFlag::TransferBit                     => acc | vk::PIPELINE_STAGE_TRANSFER_BIT,
                | PipelineStageFlag::BottomOfPipeBit                 => acc | vk::PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
                | PipelineStageFlag::HostBit                         => acc | vk::PIPELINE_STAGE_HOST_BIT,
                | PipelineStageFlag::AllGraphicsBit                  => acc | vk::PIPELINE_STAGE_ALL_GRAPHICS_BIT,
                | PipelineStageFlag::AllCommandsBit                  => acc | vk::PIPELINE_STAGE_ALL_COMMANDS_BIT,
            }
        })
    }
}

impl Handles for [PipelineStageFlag] {
    type HandleType = vk::PipelineStageFlags;

    #[inline]
    fn handles(&self) -> Vec<Self::HandleType> {
        self.iter().map(|p| p.value()).collect()
    }
}
